// ‡∏•‡∏î log TensorFlow (‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Å‡πà‡∏≠‡∏ô require tf)
process.env.TF_CPP_MIN_LOG_LEVEL = process.env.TF_CPP_MIN_LOG_LEVEL || "2";

require("dotenv").config();
const express = require("express");
const axios = require("axios");
const bodyParser = require("body-parser");
const tf = require("@tensorflow/tfjs-node");
const sharp = require("sharp");
const fs = require("fs");
const path = require("path");
// const dialogflow = require("@google-cloud/dialogflow"); // ‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á‡∏Ñ‡πà‡∏≠‡∏¢‡πÄ‡∏õ‡∏¥‡∏î

// ‡∏õ‡∏£‡∏±‡∏ö‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏° sharp (‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å)
sharp.cache(true);
sharp.concurrency(1); // ‡∏à‡∏≥‡∏Å‡∏±‡∏î concurrency ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏Å‡∏¥‡∏ô‡πÅ‡∏£‡∏°‡∏ö‡∏ô‡∏ü‡∏£‡∏µ tier
// ‚ùå ‡∏´‡πâ‡∏≤‡∏°‡πÉ‡∏ä‡πâ sharp.limitInputPixels(false) ‚Äî ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡πâ‡∏ß

const app = express();
// ‡∏ö‡∏ô Render ‡∏à‡∏∞‡∏°‡∏µ ENV PORT ‡πÉ‡∏´‡πâ‡∏°‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß; local ‡πÉ‡∏ä‡πâ 3000 ‡πÑ‡∏î‡πâ
const PORT = process.env.PORT || 3000;
const LINE_ACCESS_TOKEN = process.env.LINE_ACCESS_TOKEN;

app.use(bodyParser.json());

/* =========================
 * 1) ‡πÇ‡∏´‡∏•‡∏î labels + ‡πÇ‡∏°‡πÄ‡∏î‡∏•
 * ========================= */
const MODEL_DIR = path.join(__dirname, "model");           // ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ model.json + ‡πÑ‡∏ü‡∏•‡πå shard .bin
const LABELS_PATH = path.join(__dirname, "class_names.json"); // ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏ã‡∏ü‡∏à‡∏≤‡∏Å‡∏ï‡∏≠‡∏ô‡πÄ‡∏ó‡∏£‡∏ô (‡∏£‡∏ß‡∏° "Unknown" ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏ó‡πâ‡∏≤‡∏¢)

let labels = [];
try {
  const raw = fs.readFileSync(LABELS_PATH, "utf-8");
  labels = JSON.parse(raw);
  if (!Array.isArray(labels) || labels.length < 2) {
    throw new Error("class_names.json ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
  }
  console.log("‚úÖ Loaded labels:", labels);
} catch (e) {
  console.error("‚ùå ‡πÇ‡∏´‡∏•‡∏î class_names.json ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ:", e.message);
  // fallback ‡∏Å‡∏±‡∏ô‡∏•‡πà‡∏° (‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡∏î‡∏±‡∏Å‡∏ä‡∏±‡∏ô)
  labels = ["ClassA", "ClassB", "Unknown"];
}

const INPUT_SIZE = 300;
// ‡∏ï‡∏±‡∏î‡πÄ‡∏Ç‡πâ‡∏≤ Unknown ‡∏î‡πâ‡∏ß‡∏¢ threshold (Optional)
const USE_UNKNOWN_THRESHOLD = true;
const UNKNOWN_THRESHOLD = 0.5;
const UNKNOWN_LABEL = labels[labels.length - 1] || "Unknown";

let model;
let modelReady = false;

(async () => {
  try {
    model = await tf.loadLayersModel(`file://${path.join(MODEL_DIR, "model.json")}`);
    modelReady = true;
    console.log("‚úÖ TFJS model loaded");
  } catch (err) {
    console.error("‚ùå Failed to load model:", err);
  }
})();

/* =========================
 * 2) Helper: ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏•‡∏±‡∏ö LINE
 * ========================= */
async function replyMessage(replyToken, text) {
  try {
    await axios.post(
      "https://api.line.me/v2/bot/message/reply",
      { replyToken, messages: [{ type: "text", text }] },
      {
        headers: { Authorization: `Bearer ${LINE_ACCESS_TOKEN}` },
        timeout: 15000,
      }
    );
  } catch (e) {
    console.error("Reply error:", e?.response?.data || e.message);
  }
}

/* =========================
 * 3) ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏†‡∏≤‡∏û + ‡∏à‡∏≥‡πÅ‡∏ô‡∏Å
 * ========================= */
// ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏ï‡∏≠‡∏ô‡πÄ‡∏ó‡∏£‡∏ô‡πÉ‡∏ä‡πâ Rescaling(1./255) + include_preprocessing=False
// ‡∏ù‡∏±‡πà‡∏á inference ‡∏à‡∏∂‡∏á‡∏ï‡πâ‡∏≠‡∏á normalize ‡πÄ‡∏≠‡∏á‡∏î‡πâ‡∏ß‡∏¢ /255.0
async function classifyImage(imageBuffer) {
  if (!model || !modelReady) throw new Error("Model is not loaded yet");

  // resize ‚Üí PNG ‚Üí tensor ‚Üí normalize ‚Üí [1,H,W,3]
  // ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡∏•‡∏¥‡∏°‡∏¥‡∏ï‡∏û‡∏¥‡∏Å‡πÄ‡∏ã‡∏•‡∏Ç‡∏≠‡∏á sharp ‡πÉ‡∏´‡πâ‡∏ú‡πà‡∏≤‡∏ô‡∏≠‡∏≠‡∏õ‡∏ä‡∏±‡∏ô‡πÉ‡∏ô‡∏≠‡∏¥‡∏ô‡∏™‡πÅ‡∏ï‡∏ô‡∏ã‡πå (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô global)
  const resized = await sharp(imageBuffer, { limitInputPixels: false })
    .resize(INPUT_SIZE, INPUT_SIZE, { fit: "cover" })
    .toFormat("png")
    .toBuffer();

  // ‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ await ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô tf.tidy (‡πÄ‡∏î‡∏µ‡πã‡∏¢‡∏ß‡∏Å‡∏£‡∏≤‡∏ü‡πÇ‡∏î‡∏ô dispose ‡∏Å‡πà‡∏≠‡∏ô await ‡πÄ‡∏™‡∏£‡πá‡∏à)
  const tensor = tf.node.decodeImage(resized, 3).toFloat().div(255).expandDims(0); // [1,300,300,3]
  const logits = model.predict(tensor); // Tensor

  // ‡πÉ‡∏ä‡πâ dataSync() ‡πÅ‡∏ö‡∏ö synchronous ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡πÑ‡∏î‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
  const probs = logits.dataSync(); // Float32Array ‡∏¢‡∏≤‡∏ß‡πÄ‡∏ó‡πà‡∏≤ labels.length

  let maxProb = -1;
  let maxIdx = -1;
  for (let i = 0; i < probs.length; i++) {
    if (probs[i] > maxProb) {
      maxProb = probs[i];
      maxIdx = i;
    }
  }

  const numClasses = labels.length;
  let finalIdx = maxIdx;
  if (USE_UNKNOWN_THRESHOLD && maxProb < UNKNOWN_THRESHOLD) {
    finalIdx = numClasses - 1; // Unknown (‡∏ó‡πâ‡∏≤‡∏¢‡∏™‡∏∏‡∏î)
  }

  const label = labels[finalIdx] || "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡πÑ‡∏î‡πâ";
  const score = Number((probs[maxIdx] * 100).toFixed(2)); // ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô % ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏•‡∏≤‡∏™‡∏ó‡∏µ‡πà‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î

  // ‡πÄ‡∏Å‡πá‡∏ö‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥
  tf.dispose([tensor, logits]);

  return { label, score, maxIdx, maxProb, appliedUnknown: finalIdx !== maxIdx };
}

/* =========================
 * 4) LINE Webhook
 * ========================= */
app.post("/webhook", async (req, res) => {
  const events = req.body?.events || [];

  for (const event of events) {
    const replyToken = event.replyToken;

    try {
      if (!modelReady) {
        await replyMessage(replyToken, "‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏≠‡∏¢‡∏π‡πà ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏ô‡πÑ‡∏°‡πà‡∏Å‡∏µ‡πà‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏Ñ‡πà‡∏∞");
        continue;
      }

      // ‡∏Å‡∏£‡∏ì‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
      if (event.type === "message" && event.message.type === "image") {
        const imageId = event.message.id;

        // ‡∏î‡∏∂‡∏á‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å LINE
        const imgResp = await axios.get(
          `https://api-data.line.me/v2/bot/message/${imageId}/content`,
          {
            headers: { Authorization: `Bearer ${LINE_ACCESS_TOKEN}` },
            responseType: "arraybuffer",
            timeout: 20000,
          }
        );

        // ‡∏à‡∏≥‡πÅ‡∏ô‡∏Å
        const { label, score, appliedUnknown } = await classifyImage(imgResp.data);

        // ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
        const extra = appliedUnknown ? " (‡∏à‡∏±‡∏î‡πÄ‡∏õ‡πá‡∏ô Unknown ‡πÇ‡∏î‡∏¢ threshold)" : "";
        await replyMessage(
          replyToken,
          `‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡πÅ‡∏ô‡∏Å: ${label}${extra}\n‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏•‡∏≤‡∏™‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î ~${score}%`
        );

        // ===== (‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á) ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Dialogflow =====
        // const userId = event?.source?.userId || "anon";
        // const sessionClient = new dialogflow.SessionsClient();
        // const sessionPath = sessionClient.projectAgentSessionPath(process.env.DIALOGFLOW_PROJECT_ID, userId);
        // const ask = `‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏£‡∏Ñ ${label}`; // Intent: DiseaseInfo
        // const request = { session: sessionPath, queryInput: { text: { text: ask, languageCode: "th" } } };
        // const responses = await sessionClient.detectIntent(request);
        // const dfReply = responses?.[0]?.queryResult?.fulfillmentText || "";
        // if (dfReply) await replyMessage(replyToken, dfReply);

      // ‡∏Å‡∏£‡∏ì‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
      } else if (event.type === "message" && event.message.type === "text") {
        await replyMessage(replyToken, "‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏°‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡πÇ‡∏£‡∏Ñ‡∏ú‡∏¥‡∏ß‡∏´‡∏ô‡∏±‡∏á‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡πà‡∏∞");

      } else {
        await replyMessage(replyToken, "‡∏¢‡∏±‡∏á‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏∞‡∏Ñ‡∏∞");
      }
    } catch (err) {
      console.error("Webhook error:", err?.response?.data || err.message);
      await replyMessage(replyToken, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏∞");
    }
  }

  res.sendStatus(200);
});

/* =========================
 * 5) Health Check
 * ========================= */
app.get("/", (_req, res) => res.send("Webhook is working!"));
app.get("/healthz", (_req, res) => res.json({ ok: true, modelReady, labels: labels.length }));

app.listen(PORT, () => console.log(`üöÄ Server running on port ${PORT}`));
