require("dotenv").config();
const express = require("express");
const axios = require("axios");
const bodyParser = require("body-parser");
const tf = require("@tensorflow/tfjs-node");
const sharp = require("sharp");
const fs = require("fs");
const path = require("path");
// const dialogflow = require("@google-cloud/dialogflow"); // ‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á‡∏Ñ‡πà‡∏≠‡∏¢‡∏õ‡∏•‡∏î‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå

const app = express();
const PORT = process.env.PORT || 3000;
const LINE_ACCESS_TOKEN = process.env.LINE_ACCESS_TOKEN;

app.use(bodyParser.json());

/* =========================
 * 1) ‡πÇ‡∏´‡∏•‡∏î labels + ‡πÇ‡∏°‡πÄ‡∏î‡∏•
 * ========================= */
const MODEL_DIR = path.join(__dirname, "model");           // ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ model.json + shard .bin
const LABELS_PATH = path.join(__dirname, "class_names.json"); // ‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡πÄ‡∏ó‡∏£‡∏ô (‡∏£‡∏ß‡∏° "Unknown" ‡∏ó‡πâ‡∏≤‡∏¢‡∏™‡∏∏‡∏î)

let labels = [];
try {
  const raw = fs.readFileSync(LABELS_PATH, "utf-8");
  labels = JSON.parse(raw);
  if (!Array.isArray(labels) || labels.length < 2) {
    throw new Error("class_names.json ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
  }
  console.log("‚úÖ Loaded labels:", labels);
} catch (e) {
  console.error("‚ùå ‡πÇ‡∏´‡∏•‡∏î class_names.json ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ:", e.message);
  // fallback (‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏£‡πà‡∏≤‡∏ß ‡πÜ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏•‡πà‡∏°‚Äî‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡∏î‡∏±‡∏Å‡∏ä‡∏±‡∏ô)
  labels = ["ClassA", "ClassB", "Unknown"];
}

// ‡∏≠‡∏¥‡∏á‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡πÄ‡∏ó‡∏£‡∏ô: IMG_SIZE = (300, 300) ‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ Rescaling(1./255)
const INPUT_SIZE = 300;

// ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏≤‡∏Å‡∏ï‡∏±‡∏î‡πÄ‡∏Ç‡πâ‡∏≤ Unknown ‡∏î‡πâ‡∏ß‡∏¢ threshold:
// - Unknown ‡∏≠‡∏¢‡∏π‡πà‡∏ó‡πâ‡∏≤‡∏¢‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á labels (‡∏ï‡∏≤‡∏°‡∏ï‡∏≠‡∏ô‡πÄ‡∏ã‡∏ü)
// - ‡∏ñ‡πâ‡∏≤ maxProb < THRESHOLD ‚Üí ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô "Unknown"
const USE_UNKNOWN_THRESHOLD = true;
const UNKNOWN_THRESHOLD = 0.50; // ‡∏õ‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ ‡πÄ‡∏ä‡πà‡∏ô 0.5 ‡∏ï‡∏≤‡∏°‡πÇ‡∏ô‡πâ‡∏ï‡πÉ‡∏ô‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡πÄ‡∏ó‡∏£‡∏ô
const UNKNOWN_LABEL = labels[labels.length - 1] || "Unknown";

let model;
(async () => {
  try {
    model = await tf.loadLayersModel(`file://${path.join(MODEL_DIR, "model.json")}`);
    console.log("‚úÖ TFJS model loaded");
  } catch (err) {
    console.error("‚ùå Failed to load model:", err);
  }
})();

/* =========================
 * 2) Helper: ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö LINE
 * ========================= */
async function replyMessage(replyToken, text) {
  try {
    await axios.post(
      "https://api.line.me/v2/bot/message/reply",
      {
        replyToken,
        messages: [{ type: "text", text }],
      },
      {
        headers: { Authorization: `Bearer ${LINE_ACCESS_TOKEN}` },
        timeout: 15000,
      }
    );
  } catch (e) {
    console.error("Reply error:", e?.response?.data || e.message);
  }
}

/* =========================
 * 3) Preprocess + Predict
 * ========================= */
// ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡πÉ‡∏ô‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡πÄ‡∏ó‡∏£‡∏ô‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ä‡πâ Rescaling(1./255) ‡πÅ‡∏•‡∏∞ include_preprocessing=False
// ‡∏î‡∏±‡∏á‡∏ô‡∏±‡πâ‡∏ô‡∏ù‡∏±‡πà‡∏á inference ‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥ normalize ‡πÄ‡∏≠‡∏á‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á: /255.0
async function classifyImage(imageBuffer) {
  if (!model) throw new Error("Model is not loaded yet");

  // resize ‚Üí PNG ‚Üí tensor ‚Üí normalize ‚Üí [1,H,W,3]
  const resized = await sharp(imageBuffer)
    .resize(INPUT_SIZE, INPUT_SIZE)
    .toFormat("png")
    .toBuffer();

  const tensor = tf.node
    .decodeImage(resized, 3)  // [H,W,3]
    .toFloat()
    .div(255.0)               // ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö Rescaling(1./255)
    .expandDims(0);           // [1,H,W,3]

  const logits = model.predict(tensor);
  const probs = await logits.data(); // Float32Array ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß = labels.length
  const numClasses = labels.length;

  // ‡∏´‡∏≤ top-1
  let maxProb = -1;
  let maxIdx = -1;
  for (let i = 0; i < probs.length; i++) {
    if (probs[i] > maxProb) {
      maxProb = probs[i];
      maxIdx = i;
    }
  }

  // ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö Unknown ‡∏î‡πâ‡∏ß‡∏¢ threshold (‡∏≠‡∏≠‡∏õ‡∏ä‡∏±‡∏ô)
  let finalIdx = maxIdx;
  if (USE_UNKNOWN_THRESHOLD && maxProb < UNKNOWN_THRESHOLD) {
    finalIdx = numClasses - 1; // ‡∏ä‡∏µ‡πâ‡πÑ‡∏õ Unknown (‡∏ó‡πâ‡∏≤‡∏¢‡∏™‡∏∏‡∏î)
  }

  const label = labels[finalIdx] || "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡πÑ‡∏î‡πâ";
  const score = Number((probs[maxIdx] * 100).toFixed(2)); // ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô‡∏Ç‡∏≠‡∏á top-1

  // ‡πÄ‡∏Å‡πá‡∏ö‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥
  tf.dispose([tensor, logits]);

  return { label, score, maxIdx, maxProb, appliedUnknown: finalIdx !== maxIdx };
}

/* =========================
 * 4) LINE Webhook
 * ========================= */
app.post("/webhook", async (req, res) => {
  const events = req.body?.events || [];
  for (const event of events) {
    const replyToken = event.replyToken;

    try {
      // ‡∏£‡∏±‡∏ö "‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û"
      if (event.type === "message" && event.message.type === "image") {
        const imageId = event.message.id;

        // 1) ‡∏î‡∏∂‡∏á‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å LINE
        const imgResp = await axios.get(
          `https://api-data.line.me/v2/bot/message/${imageId}/content`,
          {
            headers: { Authorization: `Bearer ${LINE_ACCESS_TOKEN}` },
            responseType: "arraybuffer",
            timeout: 20000,
          }
        );

        // 2) ‡∏à‡∏≥‡πÅ‡∏ô‡∏Å
        const { label, score, appliedUnknown } = await classifyImage(imgResp.data);

        // 3) ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö (‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Dialogflow ‚Äî ‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô)
        const extra = appliedUnknown ? " (‡∏à‡∏±‡∏î‡πÄ‡∏õ‡πá‡∏ô Unknown ‡πÇ‡∏î‡∏¢ threshold)" : "";
        await replyMessage(
          replyToken,
          `‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡πÅ‡∏ô‡∏Å: ${label}${extra}\n‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏•‡∏≤‡∏™‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î ~${score}%`
        );

        // ====== (‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÑ‡∏ß‡πâ) ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Dialogflow ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≥‡πÅ‡∏ô‡∏Å ======
        // const userId = event?.source?.userId || "anon";
        // const sessionClient = new dialogflow.SessionsClient();
        // const sessionPath = sessionClient.projectAgentSessionPath(process.env.DIALOGFLOW_PROJECT_ID, userId);
        // const ask = `‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏£‡∏Ñ ${label}`; // Intent: DiseaseInfo
        // const request = {
        //   session: sessionPath,
        //   queryInput: { text: { text: ask, languageCode: "th" } },
        // };
        // const responses = await sessionClient.detectIntent(request);
        // const dfReply = responses?.[0]?.queryResult?.fulfillmentText || "";
        // if (dfReply) await replyMessage(replyToken, dfReply);

      } else if (event.type === "message" && event.message.type === "text") {
        // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Dialogflow)
        await replyMessage(replyToken, "‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏°‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡πÇ‡∏£‡∏Ñ‡∏ú‡∏¥‡∏ß‡∏´‡∏ô‡∏±‡∏á‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡πà‡∏∞");
      } else {
        await replyMessage(replyToken, "‡∏¢‡∏±‡∏á‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏∞‡∏Ñ‡∏∞");
      }
    } catch (err) {
      console.error("Webhook error:", err?.response?.data || err.message);
      await replyMessage(replyToken, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏∞");
    }
  }
  res.sendStatus(200);
});

/* =========================
 * 5) Health check
 * ========================= */
app.get("/", (_req, res) => res.send("Webhook is working!"));

app.listen(PORT, () => console.log(`üöÄ Server running on port ${PORT}`));
